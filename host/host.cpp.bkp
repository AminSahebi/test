/*
   Copyright (c) 2020-2021 Amin Sahebi,
   University of Siena, University of Florence.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <fstream>
#include <stdexcept>
#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include <string>
#include <chrono>
#include <thread>
#include <numeric>
#include <cstring>

#include <CL/cl_ext_xilinx.h>
#include <ap_int.h>

#include "graph.h"
#include "common.h"
#include "constants.h"
#include "kernel.h"


//#define DEBUG //standard debug
//#define _DEBUG_ //Debug level 1
//#define __DEBUG__ //Debug level 2

#define alloc_size 1024*8

typedef ap_uint<512> buffer;
using data_t = EdgeId; //ap_uint<512>;


int main(int argc, char** argv){

	if(argc < 5){
		printf("usage: %s [xclbin binary] [Grid_files_path] [vertices] [p]\n",argv[0]);
		exit(1);
	}
	std::string binaryFile = argv[1];
	cl_int err;
	unsigned fileBufSize;
	std::string path = argv[2];
	if (path == std::string("") || is_number(path)){
		printf("File path is not correct! \n"); 
		printf("usage: %s [xclbin binary] [Grid_files_path] [vertices] [p]\n",argv[0]);
		return -1;
	}
	int vertices = atoi(argv[3]);
	int p = atoi(argv[4]);
	Graph graph(path);
	int partitions = p;
	assert(graph.partitions==p && "not correct partitions!");
/*
	long begin_offset, end_offset;
	for (int i=0; i< partitions; i++){
		for(int j=0; j< partitions; j++){
			begin_offset = graph.row_offset[i*partitions+j];
			end_offset = graph.row_offset[i*partitions+j+1];
#ifdef DEBUG
			printf("[%d][%d] , begin offset %ld , end offset %ld \n", i , j, begin_offset,end_offset);
#endif
		}
	}
*/
	/** walk over the blocks (which has been contiguously appended to a one file "row") */
	/*	int fin_row = open((path+"/row").c_str(), O_RDONLY);
		Edge * edge;	
		EdgeId bytes;
		edge = new Edge [partitions*partitions];
		bytes = read(fin_row, edge, sizeof(EdgeId)*(partitions*partitions));

		for(int i=0; i<partitions*partitions;i++){
		struct Edge* e = &edge[i];
		EdgeId src = e->source;
	//printf("src[%d] %ld :",i,src);
	EdgeId dst = e->target;
	//printf("dst[%d] %ld\n",i,dst);
	}
	close(fin_row);
	*/	

	auto start = std::chrono::steady_clock::now(); 
	/** walk over the blocks (which has been partitoned by block-i-j 
	 * files on the disk and assign them to 
	 * the aligned buffers in the host RAM) 
	 */
	int p2=partitions*partitions;
//	std::vector<int, aligned_allocator<int>> ffsize(p2);
	int* ffsize = new int [p2];
	for(int i =0 ; i < partitions; i++){	
		for(int j=0; j< partitions; j++) {
			ffsize[i*partitions + j ] = graph.fsize[i][j];
		}
	}

	//std::vector<EdgeId, aligned_allocator<EdgeId>> src(p2);
//	for(int i = 0; i < p2; ++i)
	//	src[i].resize(ffsize[i]);
	EdgeId** src = new EdgeId*[p2];
	for(int i = 0; i < p2; ++i)
		src[i] = new EdgeId[ffsize[i]];

//	std::vector<EdgeId, aligned_allocator<EdgeId>> dst(p2);
//	for(int i = 0; i < p2; ++i)
//		dst[i].resize(ffsize[i]);
	EdgeId** dst = new EdgeId*[p2];
	for(int i = 0; i < p2; ++i)
		dst[i] = new EdgeId[ffsize[i]];

	for(int i =0 ; i < partitions; i++){	
		for(int j=0; j< partitions; j++) {
			int fin_blk = open((path+"/block-"+ std::to_string(i) + "-" + std::to_string(j)).c_str(), O_RDONLY);
			Edge * edge;	
			EdgeId bytes;
			int l = i*partitions+j;
			int size = (graph.fsize[i][j])/(sizeof(EdgeId));

			if (size != 0 ){
#ifdef DEBUG
				printf("block-%d-%d \tsize \t%d\n",i,j,size);
#endif	
				edge = new Edge [size];	
				bytes = read(fin_blk, edge, sizeof(EdgeId)*(size));
				for(int x=0 ; x < size ; x++){
					struct Edge* e = &edge[x];
					src[l][x] = e->source;
					dst[l][x] = e->target;
#ifdef _DEBUG_
					printf("src[%d] %ld ",i,src[x]);
					printf("dst[%d] %ld \n",i,dst[x]);
					fflush(stdout);
#endif
				}

			}
			close(fin_blk);
		}
	}

	printf("[INFO] Graph init done: \n");
	auto end = std::chrono::steady_clock::now(); 
	double time_taken = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count(); 
	time_taken *= 1e-9; 
	printf("[INFO] Graph load time: %f sec\n", time_taken);

	/** Get All PLATFORMS, then search for Target_Platform_Vendor (CL_PLATFORM_VENDOR)
	  Search for Platform: Xilinx
	  Check if the current platform matches Target_Platform_Vendor */

	std::vector<cl::Device> devices = get_devices("Xilinx");
	devices.resize(1);
	cl::Device device = devices[0];
	std::cout << "DEVICE " << device.getInfo<CL_DEVICE_NAME>() << std::endl;

	/** Create Context */ 
	OCL_CHECK(err, cl::Context context(device, NULL, NULL, NULL, &err));

	/** Create Command Queue */
	OCL_CHECK(err, cl::CommandQueue q(context, device, CL_QUEUE_PROFILING_ENABLE, &err));

	/** Load Binary File from disk */
	char* fileBuf = read_binary_file(binaryFile, fileBufSize);
	cl::Program::Binaries bins{{fileBuf, fileBufSize}};

	/** Create the program object from the binary and program the FPGA device with it */
	OCL_CHECK(err, cl::Program program(context, devices, bins, NULL, &err));

	delete[] fileBuf;
	/** OpenCL functions to program the device finishes here */

	/** Create Kernels */
	OCL_CHECK(err, cl::Kernel kernel(program,"pagerank_0", &err));

	/** Host buffers pointers */
	OCL_CHECK(err, cl::Buffer outDegree(context, CL_MEM_READ_ONLY | CL_MEM_USE_HOST_PTR, sizeof(buffer), graph.outdegrees, &err));


	auto start_krnl = std::chrono::steady_clock::now(); 
	
	std::vector<cl::Buffer> edgeSrc;
	std::vector<cl::Buffer> edgeDst;

	for(int i=0;i<p2;i++){
		OCL_CHECK(err, cl::Buffer edgeSrc(context, CL_MEM_READ_ONLY | CL_MEM_USE_HOST_PTR, sizeof(buffer), src[i] , &err));
	}
	for(int i=0;i<p2;i++){
		OCL_CHECK(err, cl::Buffer edgeDst(context, CL_MEM_READ_ONLY | CL_MEM_USE_HOST_PTR, sizeof(buffer), dst[i], &err));
	}
	
	/** setting the kernel arguments */
    	OCL_CHECK(err, err = kernel.setArg(1, vertices));
    	OCL_CHECK(err, err = kernel.setArg(2, partitions));
    	OCL_CHECK(err, err = kernel.setArg(3, edgeSrc));
   	OCL_CHECK(err, err = kernel.setArg(4, edgeDst));	
   	OCL_CHECK(err, err = kernel.setArg(5, outDegree));	

	/** copy data to the device global memory */
	for(int i=0;i<p2;i++){
	OCL_CHECK(err, err = q.enqueueMigrateMemObjects({edgeSrc[i]}, 0 ));
	}
	for(int i=0;i<p2;i++){
	OCL_CHECK(err, err = q.enqueueMigrateMemObjects({edgeDst[i]}, 0 ));
	}
	OCL_CHECK(err, err = q.enqueueMigrateMemObjects({outDegree}, 0 ));

	/** Launch the Kernel */
	OCL_CHECK(err, err = q.enqueueTask(kernel));
	
	auto end_krnl = std::chrono::steady_clock::now(); 
	double time_taken_krnl = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count(); 
	time_taken_krnl *= 1e-9; 
	printf("[INFO] Kernel launch time: %f sec\n", time_taken_krnl);

	//   std::vector<cl::Event> events_enqueueTask(numIter);
	//
	/*
#ifndef USE_HBM
std::vector<cl_mem_ext_ptr_t> mext_in(9);

mext_in[0].flags = XCL_MEM_DDR_BANK0;
mext_in[0].obj = offsetArr; // pagerank2;
mext_in[0].param = 0;
mext_in[1].flags = XCL_MEM_DDR_BANK0;
mext_in[1].obj = indiceArr;
mext_in[1].param = 0;
mext_in[2].flags = XCL_MEM_DDR_BANK0;
mext_in[2].obj = weightArr;
mext_in[2].param = 0;
mext_in[3].flags = XCL_MEM_DDR_BANK0;
mext_in[3].obj = degreeCSR;
mext_in[3].param = 0;
mext_in[4].flags = XCL_MEM_DDR_BANK0;
mext_in[4].obj = cntValFull;
mext_in[4].param = 0;
mext_in[5].flags = XCL_MEM_DDR_BANK0;
mext_in[5].obj = buffPing;
mext_in[5].param = 0;
mext_in[6].flags = XCL_MEM_DDR_BANK0;
mext_in[6].obj = buffPong;
mext_in[6].param = 0;
mext_in[7].flags = XCL_MEM_DDR_BANK0;
mext_in[7].obj = resultInfo;
mext_in[7].param = 0;
mext_in[8].flags = XCL_MEM_DDR_BANK0;
mext_in[8].obj = orderUnroll;
mext_in[8].param = 0;
#else

std::vector<cl_mem_ext_ptr_t> mem_ext(9);
mext_in[0].flags = XCL_BANK0;
mext_in[0].obj = offsetArr;
mext_in[0].param = 0;
mext_in[1].flags = XCL_BANK2;
mext_in[1].obj = indiceArr;
mext_in[1].param = 0;
mext_in[2].flags = XCL_BANK4;
mext_in[2].obj = weightArr;
mext_in[2].param = 0;
mext_in[3].flags = XCL_BANK6;
mext_in[3].obj = degreeCSR;
mext_in[3].param = 0;
mext_in[4].flags = XCL_BANK8;
mext_in[4].obj = cntValFull;
mext_in[4].param = 0;
mext_in[5].flags = XCL_BANK10;
mext_in[5].obj = buffPing;
#endif
*/

	/** after all preparations call the kernel */
	//pagerank_kernel();

}

